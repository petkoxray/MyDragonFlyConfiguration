import inspect


def method_builder(method_list, object_to_call, keep_self):
    """ Takes a list of methods generated by inspect.getmembers(). Given this list, tries to build
     a corresponding list of function/method definitions that serve to map the function definition to
     a method call -- the object of the method call is represented by object_to_call. Produces a list of
     strings which are actual Python code meant to be executed by 'exec'.
     
     For example, given the object_to_call, myObject, and the method definition:
    
         def oneParameter(self, name):
            pass
    
    method_builder() should generate:
    
        'def oneParameter(name): myObject.oneParameter(name)'
        
    """
    
    code_list = []
    for method in method_list:
        current_method_name = method[0]
        if not current_method_name == "__init__":
            code = "def " + current_method_name + "(): " + object_to_call + "." + current_method_name + "()"
            argument_specification = inspect.getargspec(method[1])  # method[1] is the actual method object
            if argument_specification.args:
                code = build_code_with_arguments(current_method_name, argument_specification, object_to_call, keep_self)

            code_list.append(code)
    return code_list


def build_code_with_arguments(current_method_name, argument_specification, object_to_call, keep_self):
    arguments = argument_specification.args
    arguments_with_defaults = ()
    # we have some arguments to deal with
    if argument_specification.defaults:
        defaults = argument_specification.defaults
        arguments_which_have_defaults = arguments[-len(defaults):]
        arguments_with_defaults = zip(arguments_which_have_defaults, defaults)
        if len(arguments) >= len(arguments_with_defaults):
            arguments = arguments[:-len(defaults)]  # we have some defaults, so remove those from the list of arguments -- need to deal with those separately

    call_arguments = ""
    have_self = False
    for argument in arguments:
        if argument == "self":
            have_self = True
        else:
            call_arguments = call_arguments + argument + ", "

    definition_arguments = call_arguments
    for default_argument in arguments_with_defaults:
        definition_arguments = definition_arguments + default_argument[0] + "=" + str(default_argument[1]) + ", "
        call_arguments = call_arguments + default_argument[0] + ", "

    if keep_self:
        if have_self:
            definition_arguments = "self, " + definition_arguments
        
    call_arguments = call_arguments.strip(", ")
    definition_arguments = definition_arguments.strip(", ")
    
    code = "def " + current_method_name + "(" + definition_arguments + "): " + object_to_call + "." + current_method_name + "(" + call_arguments + ")"
    return code

